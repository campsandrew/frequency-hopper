%% General simulation parameters
Rsym = 0.2e6;              % Symbol rate in Hertz
ModulationOrder = 4;       % QPSK alphabet size
Interpolation = 2;         % Interpolation factor
Decimation = 1;            % Decimation factor
Tsym = 1 / Rsym;           % Symbol time in sec
Fs = Rsym * Interpolation; % Sample rate
channels = [2.4e9, 2.401e9, 2.402e9, 2.403e9, 2.404e9, 2.405e9, 2.406e9, 2.407e9, 2.408e9, 2.409e9, 2.41e9];

%% Tx parameters
RolloffFactor = 0.5;
ScramblerBase = 2;
ScramblerPolynomial = [1 1 1 0 1];
ScramblerInitialConditions = [0 0 0 0];
RaisedCosineFilterSpan = 10;

%% Rx parameters
DesiredPower                  = 2;            % AGC desired output power (in watts)
AveragingLength               = 50;           % AGC averaging length
MaxPowerGain                  = 60;           % AGC maximum output power gain
MaximumFrequencyOffset        = 6e3;
K = 1;
A = 1/sqrt(2);
PhaseRecoveryLoopBandwidth    = 0.01;         % Normalized loop bandwidth for fine frequency compensation
PhaseRecoveryDampingFactor    = 1;            % Damping Factor for fine frequency compensation
TimingRecoveryLoopBandwidth   = 0.01;         % Normalized loop bandwidth for timing recovery
TimingRecoveryDampingFactor   = 1;            % Damping Factor for timing recovery
TimingErrorDetectorGain       = 2.7*2*K*A^2+2.7*2*K*A^2;
PreambleDetectorThreshold     = 0.8;

%% Frame Specifications
BarkerCode = [+1 +1 +1 +1 +1 -1 -1 +1 +1 -1 +1 -1 +1];
BarkerLength = length(BarkerCode);
HeaderLength = BarkerLength * 2;

%% Message Info
Message = 'Hello World';
MessageLength = length(Message) + 5;
NumberOfMessage = 100;
PayloadLength = NumberOfMessage * MessageLength * 7;
FrameSize = (HeaderLength + PayloadLength) / log2(ModulationOrder);

%% Message generation
msgSet = zeros(NumberOfMessage * MessageLength, 1); 
for msgCnt = 0 : NumberOfMessage - 1
    msgSet(msgCnt * MessageLength + (1 : MessageLength)) = ...
        sprintf('%s %03d\n', Message, msgCnt);
end
integerToBit = comm.IntegerToBit(7, 'OutputDataType', 'double');
MessageBits = integerToBit(msgSet);

% For BER calculation masks
BerMask = zeros(NumberOfMessage * length(Message) * 7, 1);
for i = 1 : NumberOfMessage
    BerMask( (i-1) * length(Message) * 7 + ( 1: length(Message) * 7) ) = ...
        (i-1) * MessageLength * 7 + (1: length(Message) * 7);
end

%% Pluto TX
tx = sdrtx(..., 
    'Pluto', ...
    'RadioID', 'usb:0', ...
    'CenterFrequency', channels(1), ...
    'BasebandSampleRate', Fs, ...
    'SamplesPerFrame', Interpolation * FrameSize, ...
    'Gain', 0);
hTx = QPSKTransmitter(...
    'UpsamplingFactor',             Interpolation, ...
    'RolloffFactor',                RolloffFactor, ...
    'RaisedCosineFilterSpan',       RaisedCosineFilterSpan, ...
    'MessageBits',                  MessageBits, ...
    'MessageLength',                MessageLength, ...
    'NumberOfMessage',              NumberOfMessage, ...
    'ScramblerBase',                ScramblerBase, ...
    'ScramblerPolynomial',          ScramblerPolynomial, ...
    'ScramblerInitialConditions',   ScramblerInitialConditions);

%% Pluto RX
rx = sdrrx(..., 
    'Pluto', ...
    'CenterFrequency', channels(1), ...
    'BasebandSampleRate', Fs, ...
    'SamplesPerFrame', Interpolation*FrameSize, ...
    'GainSource', 'Manual', ...
    'Gain', 30, ...
    'OutputDataType', 'double', ...
    'RadioID', 'usb:0');
hRx  = QPSKReceiver(...
    'ModulationOrder', ModulationOrder, ...
    'SampleRate', Fs, ...
    'DecimationFactor', Decimation, ...
    'FrameSize', FrameSize, ...
    'HeaderLength', HeaderLength, ...
    'NumberOfMessage', NumberOfMessage, ...
    'PayloadLength', PayloadLength, ...
    'DesiredPower', DesiredPower, ...
    'AveragingLength', AveragingLength, ...
    'MaxPowerGain', MaxPowerGain, ...
    'RolloffFactor', RolloffFactor, ...
    'RaisedCosineFilterSpan', RaisedCosineFilterSpan, ...
    'InputSamplesPerSymbol', Interpolation, ...
    'MaximumFrequencyOffset', MaximumFrequencyOffset, ...
    'PostFilterOversampling', Interpolation/Decimation, ...
    'PhaseRecoveryLoopBandwidth', PhaseRecoveryLoopBandwidth, ...
    'PhaseRecoveryDampingFactor', PhaseRecoveryDampingFactor, ...
    'TimingRecoveryDampingFactor', TimingRecoveryDampingFactor, ...
    'TimingRecoveryLoopBandwidth', TimingRecoveryLoopBandwidth, ...
    'TimingErrorDetectorGain', TimingErrorDetectorGain, ...
    'PreambleDetectorThreshold', PreambleDetectorThreshold, ...
    'DescramblerBase', ScramblerBase, ...
    'DescramblerPolynomial', ScramblerPolynomial, ...
    'DescramblerInitialConditions', ScramblerInitialConditions,...
    'BerMask', BerMask, ...
    'PrintOption',true);

%% TX MESSAGE
tx.transmitRepeat(step(hTx));

%% RX MESSAGE
currentTime = 0;
StopTime = 1000;
BER = [];
rcvdSignal = complex(zeros(Interpolation * FrameSize, 1));
message = zeros(1600, 1);
while currentTime <  StopTime
    rcvdSignal = rx();
    [~, ~, ~, ~, message] = hRx(rcvdSignal);
%     fprintf('TEST: %s', char(message));
%     disp("TEST: " + sprintf('%s\n', char(message)));
    currentTime = currentTime + (rx.SamplesPerFrame / rx.BasebandSampleRate);
end

% FrameTime = Interpolation * FrameSize / Fs;
% StopTime  = 1000;
% currentTime = 0;
% while currentTime < StopTime
%     data = step(hTx);
%     step(tx, data);
%     currentTime = currentTime + FrameTime;
% end
    
release(hRx);
release(hTx);
release(rx);
release(tx);


